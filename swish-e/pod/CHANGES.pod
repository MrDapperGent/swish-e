=head1 NAME

CHANGES - List of revisions

=head1 Revision History

This document contains list of bug fixes and feature additions to SWISH-E.

=head2 Version 2.2

Release Date: ???????

Many large changes were made internally in the code, some for performance reasons, some for feature
changes and additions, and some to prepare for new features in later versions of SWISH-E.

=over 4

=item * Documentation!

Documentation is now included in the source distribution as .pod (perldoc) files, and as HTML files.
In addition, the distribution can now generate PDF, postscript, and unix man pages from the source
.pod files.  See L<README|README> for more information.

=item * Indexing and searching speed

The indexing process has been imporoved.  Depending on a number of factors, you may see
a significant improvement in indexing speed, especially if upgrading from version 1.x.

Searching speed has also been improved.  Properties are not loaded until results are displayed,
and properties are pre-sorted during indexing to speed up sorting results by properties.

=item * Properties are written to a sepearte file

Swish now stores document properties in a separate file.  This means there are now two
files that make up a swish index.  The default files are C<index.swish-e> and C<index.swish-e.prop>.

This change frees memory while indexing, allowing larger collections to be indexed in memory.

The config directive C<PROPFILE> in C<config.h> can be used to disable this behavior.

=item * Internal data stored as Properties

Pre 2.2 some internal data was stored in fixed locations within the index, namely the
file name, file size, and title.  2.2 introduced new internal data such as the last modified date, and
document summaries.
This data is considered I<meta data> since it is data about a document.

Instead of adding new data to the internal structure of the index file,
it was decided to use the MetaNames and PropertyNames feature of swish
to store this meta information.
This allows for new meta data to be added at a later time (e.g. Content-type), and provides an easy and customizable
way to print results with the C<-p> switch and the new C<-x> switch.
In addition, search results can now be sorted and limited by properties.

For example, to sort by the rank and title:

    swish-e -w foo -s swishrank desc swishtitle asc


=item * The header display has been slightly reorganized.

If you are parsing output headers in a program then you may need to adjust your code.
There's a new switch <-H> to control the level of header output when searching.

=item * Results are now combined when searching more than one index.

Swish now merges (and sorts) the results from multiple indexes when using C<-f> to specify
more than one index.  This change effects the way maxhits (C<-m>) works.
Here's a summary of the way swish works for the different versions.


    1.3.2 - MaxHits returns first N results starting from the first index.
            e.g. maxhits=20; 15 hits Index1, 40 hits Index2
            All 15 from Index1 plus first five from Index2 = 20 hits.

    2.0.0 - MaxHits returns first N results from each index.
            e.g. Maxhits=20; 15 hits Index1, 40 hits Index2
            All 15 from Index1 plus 15 from Index2.

    2.2.0 - Results are merged and first N results are returned.
            e.g. Maxhits=20; 15 hits Index1, 40 hits Index2
            Results are merged from each index and sorted
            (rank is the default sort) and only the first
            20 are returned.


=item * New B<prog> document source indexing method

You can now use -S prog to use an external program to supply documents
to swish.  This external program can be used to spider web servers, index databases,
or to convert any type of document into html, xml, or text, so it can be
indexed by swish.  Examples are given in the C<prog-bin> directory.

=item * The indexing parser was rewritten to be more logical.

TranslateCharacters now is done before WordCharacters is checked.  For example,

    WordCharacters abcdefghijklmnopqrstuvwxyz
    TranslateCharacters ñ n

Now C<El Niño> will be indexed as El Nino (el and nino), even though C<ñ> is
not listed in WordCharacters.

Previously, stopwords were checked after stemming and
soundex conversions, as well as most of the other word checks (WordCharacters, min/max length
and so on).  This meant that the stopword list probably didn't work as expected when using stemming.

=item * The search parser was rewritten to be more logical

The search parser was rewritten to correct a number of logic errors.  Swish
did not differentiate between meta names, swish operators and search words when parsing
the query.  This meant, for example, that metanames might be broken up by the WordCharacters
setting, and that they could be stemmed.

Swish operator characters C<"*()=> can now be searched by escaping with a backslash.
For example:

    ./swish-e -w 'this\=odd\)word'

will end up searching for the word C<this=odd)word>.  To search for a backslash character
preceed it with a backslash.

Currently, searching for:

    ./swish-e -w 'this\*'

is the same as a wildcard search.  This may be fixed in the future.    

Searching for buzzwords with those characters will still require backslashing.  This also may change to allow
some un-escaped operator characters, but some will always need to be escaped (e.g. the double-quote phrase character).

=item * Example C<user.config> file removed.

Previous versions of swish included a configuration file called C<user.config> which
contained examples of all directives.
This has been replace by a series of example configuration files located in the C<conf>
directory.  The configuration directives are now described in L<SWISH-CONFIG|SWISH-CONFIG>.

=item * Ports to Win32 and VMS

David Norris has included the files required to build swish under Windows.  In addition, a binary version of
swish for Win32 is now included in the distribution.
See C<src/win32>.

Jean-François Piéronne has provided the files required to build swish under OpenVMS.  See C<src/vms>
for more information.

=item * String properties are concatenated

Multiple I<string> properties of the same name in a document are now
concatenated into one property.  A space character is added between the strings
if needed.  A warning will be generated if multiple numeric or date properties are
found in the same document, and the additional properties will be ignored.

Previously, properties of the same name were added to the index, but could not be
retrieved.

To do: removed the C<next> pointer, and allow user-defined character to place between
properties.

=item * regex type added to ReplaceRules

A more general purpose pattern replacement syntax.


=item * New XML Parser

Swish now uses James Clark's expat XML parser library.

=item * LST type of document no longer supported

LST allowed indexing of files that contained multiple documents.

=back

Changes to Configuration File Directives.  Please see L<SWISH-CONFIG|SWISH-CONFIG> for
more info.

=over 4

=item * New directives: IndexContents and DefaultContents

The IndexContents directive assigns internal Swish document parsers
to files based on their file type.  The DefaultContents directive assigns
a parser to be used on file that are not assigned a parser with IndexContents.

=item * New directive: UndefinedMetaTags [error|ignore|index|auto]

This describes what to do when a meta tag is found in a document that is not listed in the MetaNames directive.

=item * New directive: IgnoreTags

Will ignore listed tags in XML files

=item * New directive: SwishProgParameters *list of words*

Passes words listed to the external swish-e program when running with
C<-S prog> document source method.

=item * New directive: ConvertHTMLEntities [yes|no]

Controls parsing and conversion of HTML entities.

=item * New directive: DontBumpPositionOnMetaTags

The word position is now bumped when a new metatag is found -- this
is to prevent phrases from matching across meta tags.  This directive will
disable this behavior for the listed tags.

This directive works for HTML and XML documents.

=item * Changed directive: IndexComments

This has been changed such that comments are not indexed by default.

=item * Changed directive: IgnoreWords

The builtin list of stopwords has been removed. Use of the SwishDefault word
will generate a warning, and no stop words will be used.  You must now specify
a list of stopwords, or specify a file of stopwords.

A sample file C<stopwords.txt> has been included in the F<conf/stopwords> directory
of the distribution, and can be used by the directive:

    IgnoreWords File: /path/to/stopwords.txt

=item * Change of the default for IgnoreTotalWordCountWhenRanking

The default is now "yes".

=item * New directive: Buzzwords

Buzzwords are words that should be indexed as-is, without checking for stopwords,
word length, WordCharacters, or any other of the word limiting features.  This allows indexing
of things like C<C++> when "+" is not listed in WordCharacters.

Currenly, IgnoreFirstChar and IgnoreLastChar will be stripped before processing Buzzwords.

In the future we may use separate IgnoreFirst/Last settings for buzzwords since, for example, you may wish to
index all C<+> within swish words, but strip C<+> from the start/end of swish words, 
but not from the buzzword C<C++>.

=item * New directives: PropertyNamesNumeric PropertyNamesDate

Before Swish 2.2 all user-defined document properties were stored in the index
as strings.  PropertyNamesNumeric and PropertyNamesDate tells swish that
a property should be stored in binary format.  This allows for correct sorting
of numeric properties.

Currenly, only integers can be stored, such as a unix timestamp.
(Swish uses C<strtoul> to convert the number to an unsigned long internally.)

PropertyNamesDate only indicates to swish that a number is a unix timestamp, and
to display the property as a formatted time when printing results.
Swish does not currently parse date strings; you must provide a unix timestamp.

=item * New directive: MetaNameAlias

You may now create alias names for MetaNames.  This allow you to map or group
multiple names to the same MetaName.

=item * New directive: PropertyNameAlias

Creates aliases for a PropertyName.

=item * New directive: ExtractPath

Allows you to use a regular expression to extract out part of the path of each file
and index it with a meta name.
For example, this allows searches to be limited to parts of your file tree.

=item * New directive: FileMatch

FileMatch is similar to FileRules.  Where FileRules is used to exclude
files and directoires, FileMatch is used to I<include> files.

=back

Changes to command line arguments.  See L<SWISH-RUN|SWISH-RUN> for documentation on these
switches.

=over 4

=item * New command line argument C<-H>

Controls the level (verbosity) of header information printed with search results.

=item * New command line argument C<-x>

Provides additional header output and allows for a I<format string> to describe what data to print.

=item * New command line argument C<-k>

Prints words stored in the swish index.

=item * New command line argument C<-N>

Provides a way to do incremental indexing by comparing last modification dates.
You pass C<-N> a path to a file and only files newer than the last modified date of that file will be indexed.

=item * Removed command line argument C<-D>

C<-D> no longer dumps the index file data.  Use C<-T> instead.

=item * New command line argument C<-T>

C<-T> is used for debugging indexing and searching.

=item * Enhanced command line argument C<-d>

Now C<-d> can accept some back-slashed characters to be used as output separators.

=item * Enhanced command line argument C<-P>

Now -P sets the phrase delimiter character in searches.

=item * New command line argument C<-L>

Swish 2.2 contains an B<experimental> feature to limit results by a range
of property values.  This behavior of this feature may change in the future.


=back

