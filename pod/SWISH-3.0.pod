=head1 NAME

Proposed changes for SWISH-E 3.0

=head1 Overview

This pages is intended to give users of SWISH-E an idea of the changes to come, to foster
discussion of the direction of SWISH-E, and a place where developers can map out new ideas.

None of this is written in stone.  Any of the developers can write their ideas in
this document, but that doesn't mean it will actually happen ;).


=head1 Move from inverted index to a data base

The swish index structure currently makes it difficult to do incremental indexing,
range limiting, and presents limits to indexing due to memory requirements.
A database may solve some of these issues, at possibly a cost of performance.

=head1 Switch to Content-Types

Moseley: Dec 28, 2000

I'm wondering if it might be smart to switch from the current "Document Types" to Content-Types.
Currently, swish know how to parse three types of documents TXT, HTML, and XML.  There's currently a new
configuration directives DefaultContents and IndexContents that map file extensions to one of the three
types.  This doesn't really work when spidering since it's the content-type that describes the document and not
the file extension.

It's an issue that can wait, but I'm concerned about backward compatiblity before people start using
the IndexContents and DefaultContents config directives and then we change to content-type in the future.
There's probably not that many people using those, but it might be work noting in the documentation that
it will change, if we agree.

The main reason to use content-type instead is for http processig where you can't depend on the
file extension to determine the document type, so with http we have to use content-type to determine
how to deal with the file.
The other reason to changes it is to break down the differences between http and file system modes of indexing.

This would, of course, lead to other issues -- like dealing with IndexOnly so that it might
be a big enough change that it also needs to wait until a later version (version 3.0?).
But it should be something we think about, and make note of in the documentation.

Again, I'd propose that swish uses a mime.types file to map from extension to content-type.
You could add or override mappings in the config file:

   AddType text/plain .doc .log

   DefaultType text/html  # like DefaultContents currently

The file source "plug-in" (whatever that ends up being) would return a content-type,
but if not returned then swish would map the type from the file name using the mime.types
file or any AddType directives.

Again, internally swish only knows about text/[TXT|HTML|XML], so there should be a way to map other types,
otherwise swish might ignore the file.  We could continue to use the three type names or switch completely to
content-types.

For example, if we continued to use [TXT|HTML|XML]

    MapType TXT  text/directory text/logfile
    MapType HTML text/html

Or maybe just extend the current directives

    IndexContents HTML .htm .html text/html

Where the content-type would have precedence over the file extensions.    

This would tell swish that those types are handled by those internal handlers.

Then as I've mentioned before, you might specify filters as such

   FilterDocument application/msword /path/to/word-to-text

And word-to-text would convert to text and return one of the
three content-types that Swish knows how to parse,
or a different content type if were to chain filters.


=head1 Fast Filters

Moseley: Dec 28, 2000

Find a way to create filtrers that can act as servers and be left in memory.  Leave the current filter system
in place for smaller indexes.  Using sockets may be the most portable method.  Could provide a perl module
to make it simple to create filters.

    FilterDocument  /path/to/filter application/gzip application/zip

Any documents that are returned to swish of those content-types would be passed to the filter program.
The protocol would look a lot like http, where swish sends headers and content, and returns headers and content.
The content could be passed onto other filters.  If the content-type returned matches one of the MapType assigned
content types then the swish internal parser would accept the document for indexing.
    
Perhaps the FilterDocument directive would be listed in order to allow chaining, but prevent loops.

=head1 Enhanced the PropertyNames directive

Moseley: Updated Jan 13, 2001

If PropertyNames directive was enhanced to be able to limit the number of characters stored, optionally
extract text from HTML, and was able to define what type of docs (text, XML, HTML) it applied to, then
the existing PropertyNames feature would work like the new StoreDescription feature but be useful for more than
just one use.

I'm not clear how to enhance the syntax of Properties and/or Metanames, but here's some ideas.  Rainer suggested
that an xml-type of format might be best and commonly understood.  That's a good idea.  Below are some older ideas
that I had.  But you will get the idea...

The metaname structure could have flags for properties:

    1 - limiting to a length
    2 - stripping HTML
    3 - encoding HTML entities on output

=head1 Alias MetaNames

There has been discussion on how to alias meta names.  The idea is that different
meta tags could all be indexed as the same tag so they could be searched as a group.

Also, it might be nice to be able to alias some of the "internal" properties.
For example, you might wish to use a meta name "title" as the "swishtitle"
for some documents.  Dealing with merged indexes would be an issue.


=head1 Apache/XML style configuration

This would be to allow some directives to be set per directory, or perl file
extenstion (or content-type).


=head1 Document Info

$Id$

.



