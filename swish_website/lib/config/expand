[%  # From chapter 11 of Badger book.


# page.trail tracks path to the current page.
DEFAULT page.trail = [ ];

# List of menu items we're constructing.
map.items = [ ];

USE Dumper;

# Walk through item names in map.menu.
FOREACH id IN map.menu;

    # Allow for there to be a missing page entry (setting the name to the menu id)
    SET map.page = {} UNLESS map.page;
    SET map.page.$id = { name = id } UNLESS map.page.$id;
    SET map.page.$id.name = id UNLESS map.page.$id.name;
    item = map.page.$id;

    # Add location data.
    item.id   = id;

    # Check for external link
    IF item.external;
        item.url = item.external;

    ELSE;
        item.path = path ? "$path/$id" : id;

        item.extension = item.defined('extension') ? item.extension : '.html';
        item.indexname = item.defined('indexname') ? item.indexname : 'index.html';

        UNLESS item.file;
            item.file = item.menu
                      ? "${item.path}/${item.indexname}"
                      : "${item.path}${item.extension}";
        END;



        # Here's a hack to deal with geneating just HTML docs (abslinks is the flag)
        # Want all links to go to http://swish-e.org.  That's set in site.url.root
        # The exception is when geneating links for the docs pages, which then
        # the links are relative to the current directory.

        IF this.abslinks && item.path.match("^docs");
            item.url = item.file.replace('^docs/','./');

            # Adjust the name of the current page for item.hot check below
            SET page.file = "docs/$page.file" UNLESS page.file.match('^docs/');

        ELSE;
            item.hidden = 1 IF this.abslinks;  # This removes the non-doc items from the menu
            item.url = "$site.url.root/$item.file";

        END;


        # When buidling pod-only then the docs/ section is moved up to root, which
        # will clash with the real root.  So need to excluded this checking with 
        # generating pods.

        IF !this.abslinks || item.path.match("^docs");

            # Is this item on the path to the current page?
            item.hot  = page.file.match("^(../)?$item.path");
            item.subs = item.hot and item.menu.size;
            item.here = (item.file == page.file);
        END;


    END;


    # Set next/last if this is the actual page.
    # These don't work if there are "hidden" menu items.
    # To fix need to set a previous item to look at next time through loop.
    IF item.here;
        page.prev = map.page.${loop.last};
        page.next = map.page.${loop.next};
    END;

    # Add item to map items list.
    map.items.push(item) UNLESS item.hidden;

    # Also to the trail if the page is hot.
    page.trail.push(item) IF item.hot;

    # Expand any submenu for this item.
    # Note, used to only expand IF item.subs, but then would not expand 
    # all items (i.e. set the page has for each one)  Need to exapnd all so can
    # use the link_to_page() MACRO.

    IF item.menu;
        INCLUDE config/expand
            map  = item
            path = item.path;
    END;
END;

-%]
